(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{364:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"webpack-配置详细"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-配置详细"}},[t._v("#")]),t._v(" webpack 配置详细")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"entry-配置详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entry-配置详情"}},[t._v("#")]),t._v(" entry 配置详情")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("entry 的常见值")]),t._v(" "),a("ul",[a("li",[t._v("String：('./src/js/index.js') ---\x3e 会输出一个 chunk，所有内容形成一个 bundle、此时 chunk 的名字默认是 main.js")]),t._v(" "),a("li",[t._v("Array：['./src/js/index.js','./src/js/add.js'] ---\x3e 多入口、所有入口文件最终都会打包到一起形成一个 chunk、输出出去只有一个 bundle、也就是说之后的所有入口文件都会打包到第一个 js 文件中，因此我们一般会将第一个位置存放入口文件、这里我们的一个典型用法就是解决 html 文件在 HMR 环境下不能热更新的问题")]),t._v(" "),a("li",[t._v("Object：对象形式请看下面的代码、也就是说我们传入多少个入口文件，就会打包输出多少个文件，我们通过键值的方式提供文件名，用值的方式提供文件路径")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  main"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  add"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/add.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/count.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" output "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  filename"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[name].[hash:10].js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("特殊用法：在 Object 用法里面使用 Array 用法，也就是说会将 Array 里面的内容打包为一个，之后的都会单独打包")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" entry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  main"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/index.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/test.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里会将这个数组作为一个输出文件输出")]),t._v("\n  add"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/add.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./src/js/count.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("适用于多入口文件中将多个文件打包为一个文件、这种特殊用法将会用在 dll 的写法")])])])]),t._v(" "),a("h2",{attrs:{id:"output-配置详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#output-配置详情"}},[t._v("#")]),t._v(" output 配置详情")]),t._v(" "),a("ul",[a("li",[t._v("output 配置项里面有两个内容是最常用的\n"),a("ul",[a("li",[t._v("filename：'js/[name].[hash].js' ---\x3e不仅可以指定输出文件的名称，而且可以指定输出文件的目录")]),t._v(" "),a("li",[t._v("path：path.resolve(__dirname,'dist') ---\x3e可以指定所有文件的公共输出目录")])])]),t._v(" "),a("li",[t._v("除此之外，还有一个 path 为 publicPath：\"/\" ---\x3e 一般用于生产环境，是指定所有输出文件的公共路径，也就是说，添加了一个服务器的根目录，也就是说当我们写了个'images/1.jpg'，加了 publicPath 之后会变成'/images/1.jpg'")]),t._v(" "),a("li",[t._v("还有一个配置选项叫 chunkFilename：'[name]_chunk.js'这个参数是指，非入口 chunk 的名称，入口 chunk 的名称我们在 filename 制定了，这里指的是通过 import 函数引入的 chunk 命名的内容，还有通过 optimization 实现的 node_modules 的 chunk 的名字")]),t._v(" "),a("li",[t._v("library:'[name]',我们在之前的定义中 webpack 会直接将我们写的模块文件作为立即执行函数添加在 js 代码中，在这种情况下，我们想要拿到这个模块，并使用他身上的方法的时候将会变得比较困难，实际上我们可以通过 library 指定一个变量名称，之后再将我们定义的变量挂载到我们想要挂载的对象身上，默认情况下不指定的话将会挂载到 window 对象上，但我们可以使用下面的参数来指定到具体的对象身上，也就是整个库向外暴露的变量名")]),t._v(" "),a("li",[t._v("libraryTarget:'window'用于指定 library 生成的变量挂载的对象、也就是变量名挂载到哪个属性上\n"),a("ul",[a("li",[t._v("值为 window、会挂载到浏览器的 window 对象上")]),t._v(" "),a("li",[t._v("值为 global、会挂载到 Node 环境的 global 对象上")]),t._v(" "),a("li",[t._v("值为 commenjs、将会以 commenjs 的方式向外暴露，将来要用 commenjs 的方式来引入")]),t._v(" "),a("li",[t._v("同样也可以使用'amd','esModule'等等")])])]),t._v(" "),a("li",[t._v("library 一般会用于将一个库打包出去，也就是 dll 的技术")])]),t._v(" "),a("h2",{attrs:{id:"module-配置详情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module-配置详情"}},[t._v("#")]),t._v(" module 配置详情")]),t._v(" "),a("ul",[a("li",[t._v("module 中我们主要配置的是 rules 配置项，里面包含了各种 loader 的具体配置")]),t._v(" "),a("li",[t._v("在具体的 rules 配置项里面常见的配置内容有：\n"),a("ul",[a("li",[t._v("test：匹配哪一类文件的正则表达式")]),t._v(" "),a("li",[t._v("use：使用哪个 loader，一般用于多个 loader")]),t._v(" "),a("li",[t._v("loader：使用哪个 loader，一般用于单个 loader")]),t._v(" "),a("li",[t._v("options：在使用单个 loader 的时候配置一些 loader 的参数")]),t._v(" "),a("li",[t._v("include：指定只检查的目录")]),t._v(" "),a("li",[t._v("exclude：排除哪些目录，可以使用正则表达式写")]),t._v(" "),a("li",[t._v("enforce：指定执行顺序，如'pre'、'post'等")]),t._v(" "),a("li",[t._v("onOf：使用下面的 loader 中的一个")])])])]),t._v(" "),a("h2",{attrs:{id:"resolve-解析模块的规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolve-解析模块的规则"}},[t._v("#")]),t._v(" resolve（解析模块的规则）")]),t._v(" "),a("ul",[a("li",[t._v("resolve 本身就是类似于 devServer 的一个配置选项，可以帮助 webpack 在解析的过程中更加精确的去做某些事情")]),t._v(" "),a("li",[t._v("resolve 配置项主要的常见配置参数有：\n"),a("ul",[a("li",[t._v("alias：用于配置解析模块路径的别名、可以方便我们写一些路径、但也会失去路径提示的功能")]),t._v(" "),a("li",[t._v("extensions：配置省略文件后缀名，也就是当我们在引入一些文件的时候可以省略哪些后缀名，需要注意的是，当一些前缀都相同，但后缀不相同的文件出现的时候不要这样使用，常见的默认可以省略的后缀名有.js 跟.json，在这里我们可以通过添加到 extension 的方法，增加一些可以忽略的后缀名")]),t._v(" "),a("li",[t._v("modules：告诉 webpack 在解析模块的时候去哪个目录查找，我们可以传入一个路径，之后的解析的时候 webpack 会直接去那个目录下面进行查找")])])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resolve "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    alias"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里我们添加了@css变量跟@js变量，他们的值就是给定的路径，之后的业务代码中可以直接使用这两个变量来代替那个路径，也就是这个路径的别名")]),t._v("\n    @css"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/css'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    @js"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// extensions选项可以配置哪些类型的文件是可以忽略扩展名的，也就是说之后业务逻辑代码中引入这些文件类型的内容的时候我们可以选择不写文件扩展名")]),t._v("\n    extensions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.css'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 告诉webpack，解析使用的模块都要去哪些目录进行查找，这样子给出来之后打包速度将会提升一些，因为webpack不用一层一层地往上进行查找了")]),t._v("\n    modules"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../node_modules'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'node_modules'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"devserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#devserver"}},[t._v("#")]),t._v(" devServer")]),t._v(" "),a("ul",[a("li",[t._v("devServer 的相关配置信息将会在下面的代码中给出")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" devServer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 运行代码的目录")]),t._v("\n  contentBase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resovle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dist'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监视contentBase目录下的所有文件，一旦有改变就reloade")]),t._v("\n  watchContentBase"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置监视文件相关的参数")]),t._v("\n  watchOptions"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略监视哪些内容")]),t._v("\n    ignore"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("node_modules")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否启用gzip压缩")]),t._v("\n  compress"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 域名")]),t._v("\n  host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 端口号")]),t._v("\n  port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否自动打开浏览器")]),t._v("\n  open"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否开启HMR")]),t._v("\n  hot"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否显示启动服务器日志信息")]),t._v("\n  clientLogLevel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 除了一些基本启动信息外、是否显示其他内容")]),t._v("\n  quite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否以全屏的方式提示当前的错误")]),t._v("\n  overlay"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理服务器配置选项、主要用于解决开发环境跨域的问题")]),t._v("\n  proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键值是处理规则，也就是代理服务器一旦检测到'/api'开头的请求，就会转发给后面指定的服务器地址")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:3000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送请求时、请求路径重写、也就是我们可能不知道服务器里面有没有api这个，但是我们就写的是api、这个时候，之后的请求要使用正确的路径，因此我们可以在这里修改，而不是一个个修改src里面的内容")]),t._v("\n      pathRewrite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里我们直接匹配了api开头的内容并直接删除了，也就是去掉了api")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /api/xxx ---\x3e  /xxx")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/^api/'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("关于 proxy（代理）\n"),a("ul",[a("li",[t._v("我们知道浏览器跟服务器之间是有跨域问题的，但是服务器跟服务器之间是没有跨域问题的")]),t._v(" "),a("li",[t._v("也就是我们可以将我们的请求转发给一个代理服务器，让这个服务器帮我们做请求，当请求完之后再返回给我们本地的浏览器，这样就用代理完美解决了跨域的问题")]),t._v(" "),a("li",[t._v("其中主要配置的是代理规则，也就是我们当前的开发服务器在端口号为 5000 的本地服务器上、我们假设我们要的资源在 localhost:5000 上")]),t._v(" "),a("li",[t._v("我们在代理服务器里面可以指定我们请求内容的检测值，也就是当 match 到我们指定的请求路径的时候将会转发请求到对应的服务器上面")]),t._v(" "),a("li",[t._v("而我们的 pathRewrite 选项是指定当前的请求域名是否用用户自定义的内容")])])])]),t._v(" "),a("h2",{attrs:{id:"optimization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimization"}},[t._v("#")]),t._v(" optimization")]),t._v(" "),a("ul",[a("li",[t._v("optimization 字面意义上来说的话是优化")]),t._v(" "),a("li",[t._v("在之前我们在 code split 部分用到过 optimization 这个配置项")]),t._v(" "),a("li",[t._v("可以查看下面的代码来知道更详细的配置信息")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优化配置项，主要用于生产环境")]),t._v("\n    optimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码分割")]),t._v("\n        splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定哪些内容要被进行分割")]),t._v("\n            chunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最小大小，也就是比这个30k还小的内容就不会进行分割")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以下为默认值、不经常修改：")]),t._v("\n            minSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大没有限制")]),t._v("\n            maxSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要提取的chunk最少被引用次数")]),t._v("\n            minChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按需加载时并行加载的文件的最大数量")]),t._v("\n            maxAsyncRequests"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 入口js文件最大并行请求数量")]),t._v("\n            maxInitialRequests"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 名称链接符")]),t._v("\n            automaticNameDelimiter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以使用命名规则")]),t._v("\n            name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分割chunk的族")]),t._v("\n            cacheGroup"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// node_modules里面的文件会被打包到vendors组的chunk中， 也就是名称为: -----\x3e vendors~xxx.js")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 还要满足上面的公共规则")]),t._v("\n                vendors"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[\\\\/]node_modules[\\\\/]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打包的优先级")]),t._v("\n                    priority"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要提取的chunk最少被引用2次")]),t._v("\n                    minChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优先级")]),t._v("\n                    priority"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前要打包的模块，和之前已经被提取的模块是同一个，就会复用，而不是重新打包")]),t._v("\n                    reuseExistingChunk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有些时候我们的index文件没有发生变化，但是其引入的文件发生了变化，这个时候我们会重新打包发生变化的内容，但是，因为index文件里面引入了这个文件，就会导致index文件里面保存的文件的名称发生变化")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了解决这一需求，我们会用一个单独的文件保存main文件引入的内容的名称，下面这个配置就是解决这个问题的")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将但钱模块的路其他模块的hash单独打包为一个runtime文件")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以解决：修改a文件导致b文件的contenthash发生变化")]),t._v("\n        runtimeChunk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("entrypoint")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("runtime-")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("entrypoint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 完成上面runtime配置之后我们就会发现多了个runtimejs文件，这个里面保存index文件引入的内容的名称及哈希值")]),t._v("\n        minimizer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置生产环境的压缩方案：js跟css、可以使用专门用于压缩的一些插件，如Terser")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"webpack-5-带来的新的升级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-5-带来的新的升级"}},[t._v("#")]),t._v(" webpack 5 带来的新的升级")]),t._v(" "),a("ul",[a("li",[t._v("通过持久缓存来提高构建性能")]),t._v(" "),a("li",[t._v("使用更好的算法跟默认值来改善长期缓存")]),t._v(" "),a("li",[t._v("通过更好的 tree shaking 来改善 bundle 的大小")]),t._v(" "),a("li",[t._v("清除处于怪异状态的内部结构、同时在 v4 中实现功能而不引入任何重大更改")])]),t._v(" "),a("h2",{attrs:{id:"webpack-5-cache-配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-5-cache-配置项"}},[t._v("#")]),t._v(" webpack 5 cache 配置项")])])}),[],!1,null,null,null);s.default=e.exports}}]);